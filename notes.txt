CS390 Notes

IBM 360 Project: devlop an OS that is scalable across the size of the machine, when upgraded, you didn't need a new operating system 

If you make a system too big/general, it becomes difficult to manage 


UNICS: Smaller version of MULTICS, more scaled down and simplistic 

UNICS kernel developed by 1 person 

C was never intended as a general purpose language 

Programming language should be readable

C is still one of the top programming languages even though it doesn't have a lot of the features in other modern languages 



API: Application Program Interface: function signature. What defines the prototype for a procedure
Function signature: the name, and the number/types of parameters 

In C, the return type is NOT part of the function signature 
In ADA, the return type IS part of the function signature 

A procedure has no return value, a function has a return value 


In C, everything is a function. EVERYTHING 

Richard stallman invented GNU 
He said that code shoud be free 
GNU Code base: a set of tools that were free. Rules: you can give this code away to anyone you want but if you modify it you must give the code away to anyone who uses it




POSIX: Specification that sought to bring together into one single unified API the unix OS

Features of Unix:
1. Process: any program running on a system 
2. Text based: everything in unix is a text file 
3. Simplifying assumptions. Everything in Unix is a file 
4. Pipe: simple, single use functions


Windows is not text based, relies on registry (database of keys)

Cygwin, WSL are both bash shells for windows 


Unix shell operates on a text buffer, and control sequences operate on that buffer



Basic commands
echo, displays its arguments


tar file (tar ball) is what source code is stored in


$ represents prompt for std user 
# represents prompt for root

cd: change working directory 
pwd: print working directory
mkdir: make directory
ls: list items in directory

cd is shell command, cwd is the system call referred to by the shell command 


shell > library > system call //order of hiearchy, shell calls library calls system call

Everything in unix is a function. A function returns a value. 
This means that unix functions return an exit code. 

When your int main() returns 0, it means nothing bad happened. You can return different values to represent failure 


#define is not a bad thing 

Using a logical or with a bitmask and value will tell you if certain values are set or not 

S_ISREG, S_ISDIR, S_ISFIFO, S_ISLNK, S_ISSOCK


& is the logical and, NOT the relational and (&&) 

struct is an aggregate data structure 


meld: file comparison for linux

beyond compare: file comparison tool that is proprietary 



Unix architecture 

Hardware is at center, kernel runs on hardware
System calls and API run on hardware 

library runs on system calls and api 

shell is a tool that comes with linux, runs on system calls to kernel 

Applications run on shell 


Bottom of page 19 explains library vs system calls 


